#!/usr/bin/env python3
"""Generate a skeletal CMakeLists.txt next to each `mkfile`.

The script scans for directories containing a file named `mkfile`.
If no CMakeLists.txt exists in that directory a very basic one is
produced that builds all `*.c` files as a static library.
The goal is to aid incremental migration from mk to CMake.
"""

from pathlib import Path
import sys

# Root directory to search; defaults to current directory.
root = Path(sys.argv[1]) if len(sys.argv) > 1 else Path('.')

for mk in root.rglob('mkfile'):
    dir_path = mk.parent
    cmake_path = dir_path / 'CMakeLists.txt'
    if cmake_path.exists():
        # Skip if the directory already contains a CMake file.
        continue

    # Derive target name from directory.
    target = dir_path.name

    # Gather all C source files in the directory.
    sources = [p.name for p in dir_path.glob('*.c')]

    with cmake_path.open('w') as f:
        # Basic CMake boilerplate with a comment describing origin.
        f.write('cmake_minimum_required(VERSION 3.16)\n')
        f.write(f'# Automatically generated by {Path(__file__).name}\n')
        f.write(f'add_library({target} STATIC\n')
        for src in sources:
            f.write(f'    {src}\n')
        f.write(')\n')
        f.write('target_include_directories(' + target + ' PUBLIC .)\n')

    print('wrote', cmake_path)
